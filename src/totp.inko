import hmac (Hmac)
import std.endian.big
import std.fmt (Format, Formatter)
import std.string (ToString)
import std.time (DateTime, Duration)
import totp.base32

let pub INTERVAL_SECS = 30
let pub TOKEN_SIZE = 6
let pub WINDOW = 1

# A Time-Based One-Time Password (TOTP) token generator and validator.
#
# This implementation is based on [RFC 6238](https://www.rfc-editor.org/rfc/rfc6238).
#
# # Examples
#
#     import totp.Totp
#
#     let base32_encoded_secret = 'GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ'
#     let totp = Totp.with_secret(base32_encoded_secret)
#
#     totp.generate # => '012345', for example (depends on the current time)
#
#     totp.validate('012345') # => true (again, depends on the current time)
#
# You can customize any of the parameters:
#
#     import std.time.DateTime
#     import totp.(Time, Totp)
#
#     let totp = Totp.with_secret('GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ')
#     totp.secret = 'GA4TQNZWGU2DGMRRGA4TQNZWGU2DGMRR'
#     totp.time = Time.At(DateTime.utc)
#     totp.interval_secs = 60
#     totp.token_size = 8
#     totp.window = 2
class pub Totp {
  # The key used to generate tokens, decoded from a base32-encoded secret.
  let pub @key: ByteArray

  # The current time. Defaults to `Time.Now`.
  let pub @time: Time

  # The number of seconds each token is valid for. Defaults to 30.
  let pub @interval_secs: Int

  # The number of digits in each token. Defaults to 6.
  let pub @token_size: Int

  # The number of time-step windows to try validation before and after the current one. Defaults to 1.
  let pub @window: Int

  # Creates a new `Totp` instance with the given secret and the default parameters.
  fn pub static with_secret(secret: String) -> Result[Totp, Error] {
    let totp = new

    try totp.secret = secret
    Result.Ok(totp)
  }

  # Creates a new `Totp` instance with an empty secret and the default parameters.
  #
  # Made private to avoid accidentally creating an instance with an empty secret.
  fn static new -> Totp {
    Totp(
      key: ByteArray.new,
      time: Time.Now,
      interval_secs: INTERVAL_SECS,
      token_size: TOKEN_SIZE,
      window: WINDOW,
    )
  }

  # Validates the given token.
  fn pub validate(token: String) -> Bool {
    let counter = timestamp_from_time / @interval_secs

    (0 - @window).to(@window).iter.any?(fn (offset) {
      token == generate_with_counter(counter + offset)
    })
  }

  # Generates a new token.
  fn pub generate -> String {
    generate_with_counter(timestamp_from_time / @interval_secs)
  }

  fn generate_with_counter(counter: Int) -> String {
    let counter_bytes = ByteArray.filled(with: 0, times: 8)

    big.write_i64(counter, into: counter_bytes, at: 0)

    let hmac = Hmac.sha1(@key, counter_bytes)
    let hmac = hmac.bytes

    let offset = hmac.get(19) & 0x0f
    let truncated = big.read_u32(hmac, offset)
    let code = truncated & 0x7fff_ffff
    let token = (code % (10 ** @token_size)).to_string.pad_start(
      '0',
      @token_size,
    )

    token
  }

  # Sets the secret.
  #
  # If the secret is a valid base32-encoded string, returns `Result.Ok(nil)`.
  # Otherwise, returns `Result.Error(Error.InvalidSecret)`.
  fn pub mut secret=(string: String) -> Result[Nil, Error] {
    @key = try base32.decode(string).map_error(fn (_) { Error.InvalidSecret })
    Result.Ok(nil)
  }

  fn timestamp_from_time -> Int {
    match self.time {
      case Now -> DateTime.utc.to_int
      case At(date_time) -> date_time.to_int
    }
  }
}

# The time factor used to generate and validate tokens.
#
# - `Time.Now` uses the time when `Totp.generate` or `Totp.validate` is called.
# - `Time.At` uses the given time.
class pub enum Time {
  case Now
  case At(DateTime)
}

# Errors that can occur when using `Totp`.
#
# - `Error.InvalidSecret` is returned when the secret is not a valid base32-encoded string.
class pub enum Error {
  case InvalidSecret
}

impl Format for Error {
  fn pub fmt(formatter: mut Formatter) {
    match self {
      case InvalidSecret -> formatter.tuple('InvalidSecret').finish
    }
  }
}

impl ToString for Error {
  fn pub to_string -> String {
    match self {
      case InvalidSecret -> 'invalid secret'
    }
  }
}
