import std.crypto.hash.(Hash, Hasher)
import std.crypto.md5.Md5
import std.crypto.sha1.Sha1
import std.crypto.sha2.(Sha256, Sha512)
import std.string.Bytes

# An implementation of the Keyed-Hash Message Authentication Code (HMAC).
#
# `Hmac` implements the `std.crypto.hash.Hasher` trait.
#
# # Examples
#
#     import hmac.Hmac
#
#     let hmac = Hmac.new_sha1('my key'.to_byte_array)
#     hmac.write('hello'.to_byte_array)
#     hmac.finish.to_string # => 'fe072cabf75976329b8da24c67dbae2be29740a2'
#
# You can also use `Hmac.sha1` etc. to generate an HMAC hash directly.
#
#     import hmac.Hmac
#
#     let hash = Hmac.sha1('my key'.to_byte_array, 'hello'.to_byte_array)
#     hash.to_string # => 'fe072cabf75976329b8da24c67dbae2be29740a2'
#
# # Limitations
#
# Underlying implementations of hash functions may have imitations.
# Refer to their respective documentation in the standard library
# for more information.
class pub Hmac[H: mut + Hasher] {
  let @inner: H
  let @outer: H

  # Creates a new instance of the HMAC hasher.
  #
  # # Examples
  #
  #     let hmac = Hmac.new(hasher: fn () { Sha1.new }, block_size: 64, key: 'my key')
  fn pub static new(hasher: fn () -> H, block_size: Int, key: ref Bytes) -> Hmac[H] {
    let key = key.slice(0, key.size)
    let key = if key.size > block_size {
      let hasher = hasher.call
      hasher.write(key)
      hasher.finish.bytes.to_byte_array
    } else {
      key
    }
    key.resize(block_size, value: 0)

    let inner = hasher.call
    let outer = hasher.call
    let ipad = ByteArray.from_array(key.iter.map fn (byte) { byte ^ 0x36 }.to_array)
    let opad = ByteArray.from_array(key.iter.map fn (byte) { byte ^ 0x5c }.to_array)
    inner.write(ipad)
    outer.write(opad)

    Hmac {
      @inner = inner,
      @outer = outer,
    }
  }

  # Creates a new instance of the HMAC-MD5 hasher with the given key.
  fn pub static new_md5(key: ref Bytes) -> Hmac[Md5] {
    Hmac.new(fn () { Md5.new }, 64, key)
  }

  # Creates a new instance of the HMAC-SHA1 hasher with the given key.
  fn pub static new_sha1(key: ref Bytes) -> Hmac[Sha1] {
    Hmac.new(fn () { Sha1.new }, 64, key)
  }

  # Creates a new instance of the HMAC-SHA256 hasher with the given key.
  fn pub static new_sha256(key: ref Bytes) -> Hmac[Sha256] {
    Hmac.new(fn () { Sha256.new }, 64, key)
  }

  # Creates a new instance of the HMAC-SHA512 hasher with the given key.
  fn pub static new_sha512(key: ref Bytes) -> Hmac[Sha512] {
    Hmac.new(fn () { Sha512.new }, 128, key)
  }

  # Generates a new HMAC-MD5 hash for the given key and message.
  #
  # # Examples
  #
  #     let hash = Hmac.md5('my key', 'hello')
  #     hash.to_string # => '88c93986a9afd5b799790d6ead203850'
  fn pub static md5(key: ref Bytes, bytes: ref Bytes) -> Hash {
    let hmac = Hmac.new_md5(key)
    hmac.write(bytes.slice(0, bytes.size))
    hmac.finish
  }

  # Generates a new HMAC-SHA1 hash for the given key and message.
  #
  # # Examples
  #
  #     let hash = Hmac.sha1('my key', 'hello')
  #     let hash.to_string # => 'fe072cabf75976329b8da24c67dbae2be29740a2'
  fn pub static sha1(key: ref Bytes, bytes: ref Bytes) -> Hash {
    let hmac = Hmac.new_sha1(key)
    hmac.write(bytes.slice(0, bytes.size))
    hmac.finish
  }

  # Generates a new HMAC-SHA256 hash for the given key and message.
  #
  # # Examples
  #
  #     let hash = Hmac.sha256('my key', 'hello')
  #     hash.to_string # => 'c46027683ca1cd4016cce63a61b85024e0310e526199da0e6cab55c4e9090d86'
  fn pub static sha256(key: ref Bytes, bytes: ref Bytes) -> Hash {
    let hmac = Hmac.new_sha256(key)
    hmac.write(bytes.slice(0, bytes.size))
    hmac.finish
  }

  # Generates a new HMAC-SHA512 hash for the given key and message.
  #
  # # Examples
  #
  #     let hash = Hmac.sha512('my key', 'hello')
  #     hash.to_string # => '2acaeff5af1c6daae1831a8f6a71e7af530b4da54a3da1af24299ba0e7501f5a1f2ebbda0e89a11ade0d94cf415b554c826b76e50fcd90a49f02641eff544518'
  fn pub static sha512(key: ref Bytes, bytes: ref Bytes) -> Hash {
    let hmac = Hmac.new_sha512(key)
    hmac.write(bytes.slice(0, bytes.size))
    hmac.finish
  }
}

impl Hasher for Hmac {
  fn pub mut write(bytes: ref ByteArray) {
    @inner.write(bytes)
  }

  fn pub move finish -> Hash {
    @outer.write(@inner.finish.bytes)
    @outer.finish
  }
}
